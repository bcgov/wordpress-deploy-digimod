kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: wordpress-nginx-deployment
  annotations:
    openshift.io/display-name: Nginx deployment templates for the persistent storage (classic) version of the WordPress deploy.
    description: Nginx deployment templates for the persistent storage (classic) version of the WordPress deploy.
    tags: nginx,wordpress

parameters:
  - name: APP_NAME
    displayName: "App Name"
    description: "The name of the application (grouped)."
    required: true
    value: "wordpress"
  - name: ROLE_NAME
    displayName: "Component Name"
    description: "The name of the application role."
    required: true
    value: "nginx"
  - name: PROJECT_NAMESPACE
    displayName: "OpenShift Project Namespace"
    description: "The namespace of the OpenShift project containing the application."
    required: true
    value: "c0cce6"
  - name: ENV_NAME
    displayName: "Environment name"
    description: "The name for this environment [dev, test, prod, tools]"
    required: true
    value: "dev"
  - name: SITE_NAME
    displayName: "Site name"
    description: "The name for the site (a-zA-Z_)"
    required: true
    value: "global"
  - name: POOL_NAME
    displayName: "Pool name"
    description: "The database shared pool instance."
    required: true
    value: "pool"

  - name: INSTANCE
    displayName: "Unique Identifier"
    description: "A unique identifier to allow for multiple instances (i.e. '-01')."
    value: ""
  - name: GIT_REF
    displayName: "Git Reference"
    description: "The git reference or branch."
    required: true
    value: "openshift"
  - name: NGINX_APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "8080"
  - name: PHP_APP_PORT
    displayName: "Application Port"
    description: "The port used to communicate with the Pod"
    value: "9000"
  - name: REPLICAS
    displayName: "Pod Replicas"
    description: "Number of pod replicas to run"
    value: "1"
  - name: CPU_REQUEST
    displayName: "CPU Request"
    description: "Starting amount of CPU the container can use."
    value: "100m"
  - name: CPU_LIMIT
    displayName: "CPU Limit"
    description: "Maximum amount of CPU the container can use."
    value: "400m"
  - name: MEMORY_REQUEST
    displayName: "Memory Request"
    description: "Starting amount of memory the container can use."
    value: "250Mi"
  - name: MEMORY_LIMIT
    displayName: "Memory Limit"
    description: "Maximum amount of memory the container can use."
    value: "500Mi"
  - name: VOLUME_NAME
    displayName: "Volume Name"
    description: "Leave blank for normal volume or add -backup for backup volume"
    value: "" # Use -p VOLUME_NAME="-backup" to mount backup volume.

objects:
  - kind: Deployment
    apiVersion: apps/v1
    metadata:
      name: ${APP_NAME}-${ROLE_NAME}--${SITE_NAME}
      namespace: ${PROJECT_NAMESPACE}-${ENV_NAME}
      annotations:
        image.openshift.io/triggers: >-
          [{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}-wordpress-run:${ENV_NAME}","namespace": "${PROJECT_NAMESPACE}-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}-wordpress--${SITE_NAME}\")].image"},{"from":{"kind":"ImageStreamTag","name":"${APP_NAME}-nginx-run:${ENV_NAME}","namespace": "${PROJECT_NAMESPACE}-tools"},"fieldPath":"spec.template.spec.containers[?(@.name==\"${APP_NAME}-nginx--${SITE_NAME}\")].image"}]
      labels:
        app.kubernetes.io/part-of: ${APP_NAME}
        app.openshift.io/runtime: nginx
        app.kubernetes.io/component: nginx
        app.kubernetes.io/instance: webserver

    spec:
      selector:
        matchLabels:
          name: ${APP_NAME}-${ROLE_NAME}--${SITE_NAME}
          app: ${APP_NAME}
          role: ${ROLE_NAME}
          env: ${ENV_NAME}
          site: ${SITE_NAME}
      strategy:
        type: RollingUpdate
        rollingParams:
          updatePeriodSeconds: 1
          intervalSeconds: 1
          timeoutSeconds: 600
          maxUnavailable: 25%
          maxSurge: 25%
        resources: {}
        activeDeadlineSeconds: 21600
      template:
        metadata:
          annotations:
            alpha.image.policy.openshift.io/resolve-names: '*'
          labels:
            name: ${APP_NAME}-${ROLE_NAME}--${SITE_NAME}
            app: ${APP_NAME}
            role: ${ROLE_NAME}
            env: ${ENV_NAME}
            site: ${SITE_NAME}
            net-tcp-8080: "server"
            net-tcp-9000: "client"
        spec:
          triggers:
            - type: "ConfigChange"

          volumes:
            - name: nginx-configmap-volume
              configMap:
                name: ${APP_NAME}-config--${SITE_NAME}
                items:
                  - key: nginx.conf
                    path: nginx.conf
                defaultMode: 420
            - name: wordpress-htdocs
              emptyDir: {}
            - name: wordpress-volume
              persistentVolumeClaim:
                claimName: ${APP_NAME}-wordpress--${POOL_NAME}
            - name: php-fpm-configmap-volume
              configMap:
                name: ${APP_NAME}-config--${SITE_NAME}
                items:
                  - key: app.ini
                    path: app.ini
                defaultMode: 420
            - name: php-fpm-secrets-volume
              secret:
                secretName: ${APP_NAME}-php-fpm-secrets--${SITE_NAME}
                defaultMode: 420
            - name: mariadb-secrets-volume
              secret:
                secretName: ${APP_NAME}-mariadb-secrets--${SITE_NAME}
                items:
                  - key: MYSQL_PASSWORD
                    path: MYSQL_PASSWORD
                defaultMode: 420
          containers:
            - name: ${APP_NAME}-wordpress--${SITE_NAME}
              image: image-registry.openshift-image-registry.svc:5000/${PROJECT_NAMESPACE}-tools/${APP_NAME}-wordpress-run:${ENV_NAME}
              wordpress-wordpress-run:
                openshift:dev:
              imagePullPolicy: Always
              ports:
                - name: ${PHP_APP_PORT}-tcp
                  containerPort: ${{PHP_APP_PORT}}
                  protocol: TCP
              volumeMounts:
                - name: wordpress-htdocs
                  mountPath: /var/www/html
                - name: php-fpm-configmap-volume
                  mountPath: /usr/local/etc/php/conf.d/zzz-app.ini
                  subPath: app.ini
                  # The entire php-fpm-secrets gets loaded into the specified directory. wp-config-docker.php is going to pick them up.
                - name: php-fpm-secrets-volume
                  readOnly: true
                  mountPath: /run/secrets/wordpress
                - name: mariadb-secrets-volume
                  readOnly: true
                  mountPath: /run/secrets/WORDPRESS_DB_PASSWORD
                  subPath: MYSQL_PASSWORD
                - name: wordpress-volume
                  mountPath: /var/www/html/wp-content/
                  subPath: ${SITE_NAME}/wp-content
              env:
                - name: WORDPRESS_DB_USER
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-config--${SITE_NAME}
                      key: MYSQL_USER
                - name: WORDPRESS_DB_NAME
                  valueFrom:
                    configMapKeyRef:
                      name: ${APP_NAME}-config--${SITE_NAME}
                      key: MYSQL_DATABASE
              envFrom:
                # There are a bunch of password-file directives in the specified configmap, and they all get loaded into the environment for wp-config-docker.php to pick up.
                - configMapRef:
                    name: ${APP_NAME}-config--${SITE_NAME}
              terminationMessagePolicy: File
              terminationMessagePath: /dev/termination-log
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
            - name: ${APP_NAME}-nginx--${SITE_NAME}
              image: image-registry.openshift-image-registry.svc:5000/${PROJECT_NAMESPACE}-tools/${APP_NAME}-nginx-run:${ENV_NAME}
              imagePullPolicy: Always
              ports:
                - name: ${NGINX_APP_PORT}-tcp
                  containerPort: ${{NGINX_APP_PORT}}
                  protocol: TCP
              volumeMounts:
                - name: wordpress-htdocs
                  mountPath: /var/www/html
                - name: wordpress-volume
                  mountPath: /var/www/html/wp-content/
                  subPath: ${SITE_NAME}/wp-content
                - name: nginx-configmap-volume
                  mountPath: /etc/nginx/conf.d/nginx.conf
                  subPath: nginx.conf
              terminationMessagePolicy: File
              terminationMessagePath: /dev/termination-log
              resources:
                requests:
                  cpu: ${CPU_REQUEST}
                  memory: ${MEMORY_REQUEST}
                limits:
                  cpu: ${CPU_LIMIT}
                  memory: ${MEMORY_LIMIT}
          restartPolicy: Always
          terminationGracePeriodSeconds: 30
          dnsPolicy: ClusterFirst
          securityContext: { }
          schedulerName: default-scheduler
